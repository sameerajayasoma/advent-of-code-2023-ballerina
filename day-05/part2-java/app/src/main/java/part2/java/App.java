/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package part2.java;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class App {

    private static final Pattern COLON_REGEX = Pattern.compile(":");
    private static final Pattern SPACE_REGEX = Pattern.compile(" ");
    private static final Pattern DASH_REGEX = Pattern.compile("-");

    public record SeedRange(long rStart, long length) {
    }

    public record Range(long srcStart, long srcEnd, long destStart, long destEnd) {
    }

    public record CategoryMap(String src, String dest, Range[] ranges) {
    }

    public long part2LowestLocation(String[] lines) {
        String seedsLine = lines[0].substring(7);
        SeedRange[] seedRanges = getSeedRanges(strToIntArray(seedsLine));
        CategoryMap[] categoryMaps = getCategoryMaps(lines);

        long minLocationNum = Long.MAX_VALUE;
        for (SeedRange seedRange : seedRanges) {
            System.out.println(seedRange);
            long destNumber = findMinLocationSeedRange(seedRange.rStart(), seedRange.length(), categoryMaps);
            if (destNumber < minLocationNum) {
                minLocationNum = destNumber;
            }
        }

        return minLocationNum;
    }

    public static void main(String[] args) {
//        System.out.println(new App().getGreeting());
    }

    public static long findMinLocationSeedRange(long seed, long seedLength, CategoryMap[] categoryMaps) {
        long seedStart = seed;
        long minLocationNum = Long.MAX_VALUE;

        while (seedStart < seed + seedLength) {
            long destNumber = seedStart;
            for (CategoryMap categoryMap : categoryMaps) {
                for (Range range : categoryMap.ranges()) {
                    if (destNumber >= range.srcStart() && destNumber <= range.srcEnd()) {
                        long diff = destNumber - range.srcStart();
                        destNumber = range.destStart() + diff;
                        break;
                    }
                }
            }

            if (destNumber < minLocationNum) {
                minLocationNum = destNumber;
            }
            seedStart++;
        }
        return minLocationNum;
    }

    public static CategoryMap[] getCategoryMaps(String[] lines) {
        List<CategoryMap> categoryMapsList = new ArrayList<>();

        int index = 2;
        while (index < lines.length) {
            String mapStartLine = lines[index].substring(0, lines[index].length() - 5);
            String[] srcToDest = DASH_REGEX.split(mapStartLine);
            List<Range> rangesList = new ArrayList<>();
            index++;

            while (index < lines.length && !lines[index].isEmpty()) {
                long[] rangeNumbers = strToIntArray(lines[index]);
                Range range = getRange(rangeNumbers);
                rangesList.add(range);
                index++;
            }

            Range[] rangesArray = new Range[rangesList.size()];
            rangesArray = rangesList.toArray(rangesArray);

            CategoryMap categoryMap = new CategoryMap(srcToDest[0], srcToDest[2], rangesArray);
            categoryMapsList.add(categoryMap);
            index++;
        }

        // Convert ArrayList to array
        CategoryMap[] categoryMapsArray = new CategoryMap[categoryMapsList.size()];
        categoryMapsArray = categoryMapsList.toArray(categoryMapsArray);

        return categoryMapsArray;
    }

    public static Range getRange(long[] numbers) {
        return new Range(
                numbers[1],
                numbers[1] + numbers[2] - 1,
                numbers[0],
                numbers[0] + numbers[2] - 1
        );
    }

    public static SeedRange[] getSeedRanges(long[] seedLineNumbers) {
        List<SeedRange> seedRangesList = new ArrayList<>();

        int index = 0;
        while (index < seedLineNumbers.length) {
            SeedRange seedRange = new SeedRange(seedLineNumbers[index], seedLineNumbers[index + 1]);
            seedRangesList.add(seedRange);
            index += 2;
        }

        // Convert ArrayList to array
        SeedRange[] seedRangesArray = new SeedRange[seedRangesList.size()];
        seedRangesArray = seedRangesList.toArray(seedRangesArray);

        return seedRangesArray;
    }

    public static long[] strToIntArray(String str) {
        List<Long> result = new ArrayList<>();
        String[] numStrList = SPACE_REGEX.split(str);

        for (String numStr : numStrList) {
            long num = Long.parseLong(numStr);
            result.add(num);
        }

        long[] resultArray = new long[result.size()];
        for (int i = 0; i < result.size(); i++) {
            resultArray[i] = result.get(i);
        }

        return resultArray;
    }
}
